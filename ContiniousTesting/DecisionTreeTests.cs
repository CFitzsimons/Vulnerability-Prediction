using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using VulnerabilityPrediction.Formatting;
using VulnerabilityPrediction.Calculations;

namespace ContiniousTesting
{
    [TestClass]
    public class DecisionTreeTests
    {

        private Classification GetClassification(double severity, double marketShare)
        {
            /* Sample exploit */
            Exploit testExploit = new Exploit(-1, DateTime.Now, "Colin", "This is just a test", ExploitType.Unknown, PlatformType.Unknown, 0, marketShare, 1, severity);
            /* Build the tree */
            ClassificationTree tree = new ClassificationTree();

            /* Attempt to classify the data */
            return tree.Classify(testExploit);
        }
        [TestMethod]
        public void LowClassification_Success()
        {
            var severity = 0.5;
            var marketShare = 0.1;

            

            Assert.IsTrue(GetClassification(severity, marketShare) == Classification.Low);
        }

        [TestMethod]
        public void GuardedClassification_Success()
        {
            var severity = 0.5;
            var marketShare = 0.7;



            Assert.IsTrue(GetClassification(severity, marketShare) == Classification.Guarded);
        }
        [TestMethod]
        public void ElevatedClassification_Success()
        {
            var severity = 0.6;
            var marketShare = 0.5;



            Assert.IsTrue(GetClassification(severity, marketShare) == Classification.Elevated);
        }
        [TestMethod]
        public void HighClassification_Success()
        {
            var severity = 0.6;
            var marketShare = 0.9;



            Assert.IsTrue(GetClassification(severity, marketShare) == Classification.High);
        }

        [TestMethod]
        public void SevereClassification_Success()
        {
            var severity = 1.0;
            var marketShare = 0.9;



            Assert.IsTrue(GetClassification(severity, marketShare) == Classification.Severe);
        }

    }
}
