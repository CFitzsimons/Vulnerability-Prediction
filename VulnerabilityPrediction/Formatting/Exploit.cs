using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace VulnerabilityPrediction.Formatting
{
    public class Exploit
    {
        public int ExploitID { get; private set; }
        public string PathToExploit { get; private set; }
        public DateTime DateReleased { get; private set; }
        public string Author { get; private set; }
        public string Description { get; private set; }
        public ExploitType Type { get; private set; }
        public int? PortNumber { get; private set; }
        public PlatformType Platform { get; private set; }
        public double PercentAffected { get; private set; }

        public double Severity { get; private set; }

        /// <summary>
        /// Takes an array of values, representing Id, FilePath, Description, Date,
        /// Author, Platform, ExploitType and Port in that order
        /// </summary>
        /// <param name="splitValues">Set of formatted values, array size must be 8.</param>
        public Exploit(string [] splitValues)
        {
            if (splitValues.Length != 8)
                throw new ArgumentException("Array must be exactly size 8.");
            try { this.ExploitID = Int32.Parse(splitValues[0]); }
            catch (Exception) { throw new ArgumentException("Issue parsing ID."); }

            PathToExploit = splitValues[1];
            Description = splitValues[2];
            DateReleased = ParseDate(splitValues[3]);
            Author = splitValues[4];
            Platform = ParsePlatform(splitValues[5]);
            Type = ParseExploit(splitValues[6]);
            PortNumber = Int32.Parse(splitValues[7]);
            
        }

        public Exploit(Object[] values)
        {
            ExploitID = (int)values[0];
            Description = (string)values[1];
            DateReleased = (DateTime)values[2];
            Author = (string)values[3];
            Platform = ParsePlatform((string)values[4]);
            PercentAffected = (double)values[5];
            Type = ParseExploit((string)values[6]);
            Severity = (double)values[7];
            PortNumber = (int)values[8];


        }

        private static ExploitType ParseExploit(string toParse)
        {
            switch (toParse.ToLower())
            {
                case "local": return ExploitType.Local;
                case "remote": return ExploitType.Remote;
                case "webapps": return ExploitType.WebApps;
                case "shellcode": return ExploitType.ShellCode;
                case "dos": return ExploitType.Dos;
                default: return ExploitType.Unknown;
            }
        }

        private static PlatformType ParsePlatform(string toParse)
        {
            switch (toParse.ToLower())
            {
                case "windows": return PlatformType.WindowsKernal;
                case "linux": return PlatformType.LinuxKernal;
                case "php": return PlatformType.Php;
                case "asp": return PlatformType.Asp;
                case "osx": return PlatformType.OSX;
                case "jsp": return PlatformType.Jsp;
                case "cgi": return PlatformType.Cgi;
                case "ios": return PlatformType.IOS;
                case "java": return PlatformType.Java;
                case "android": return PlatformType.Android;
                case "multiple": return PlatformType.Multiple;
                default: return PlatformType.Unknown;
            }
        }
        private static DateTime ParseDate(string toParse)
        {
            var split = toParse.Split('-');
            int year = Int32.Parse(split[0]);
            int month = Int32.Parse(split[1]);
            int day = Int32.Parse(split[2]);
            return new DateTime(year, month, day);
        }

    }


    /// <summary>
    /// Represents the known exploit types.
    /// </summary>
    public enum ExploitType
    {
        Local,
        Remote,
        WebApps,
        Dos,
        ShellCode,
        Unknown
        
    }
    /// <summary>
    /// Represents the applications/systems and exploit can potentially target.
    /// </summary>
    public enum PlatformType
    {
        Php,
        WindowsKernal,
        LinuxKernal,
        Asp,
        Cgi,
        OSX,
        Jsp,
        IOS,
        Android,
        Java,
        Multiple,
        Unknown
    }
}
