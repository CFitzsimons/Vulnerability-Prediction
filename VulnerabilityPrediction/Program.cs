using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityPrediction.Formatting;
using VulnerabilityPrediction.Logging;

namespace VulnerabilityPrediction
{
    class Program
    {
        public static void Main()
        {
            Dictionary<string, int> pairs = new Dictionary<string, int>();
            var list = new List<Exploit>();
            using (CsvReader reader = new CsvReader("Data Stores/exploitDB.csv"))
            {
                foreach (string[] values in reader.RowEnumerator)
                {
                    var x = new Exploit(values);
                    using (SqlConnection connection = new SqlConnection(@"Data Source=(LocalDB)\v11.0;AttachDbFilename=C:\Users\Colin\Source\Repos\Vulnerability-Prediction\VulnerabilityPrediction\Data Stores\Warehouse.mdf;Integrated Security=True"))
                    {

                        string sql = "INSERT INTO Exploits (Description, Date, TargetPort, AuthorId, PlatformID, ExploitTypeID) VALUES (@Desc, @Date, @Port, (SELECT AuthorId FROM Authors WHERE AuthorName = @authorName), (SELECT PlatformId FROM Platforms WHERE PlatformName = @platformName), (SELECT ExploitTypeId FROM ExploitTypes WHERE ExploitType = @type))";
                        SqlCommand cmd = new SqlCommand(sql);
                        cmd.Connection = connection;
                        cmd.Parameters.AddWithValue("@Desc", x.Description);
                        cmd.Parameters.AddWithValue("@Port", x.PortNumber);
                        cmd.Parameters.AddWithValue("@Date", x.DateReleased.Date.ToString("yyyy-MM-dd"));
                        cmd.Parameters.AddWithValue("@authorName", x.Author);
                        cmd.Parameters.AddWithValue("@platformName", x.Platform.ToString());
                        cmd.Parameters.AddWithValue("@type", x.Type.ToString());

                        connection.Open();
                        try
                        {

                            cmd.ExecuteNonQuery();
                        }
                        catch (Exception e)
                        {
                            Logger.Log(e);
                        }
                    }
                }
            }
            Console.WriteLine("DONE!");
            Console.ReadLine();
            
            //var items = from pair in pairs orderby pair.Value descending select pair;
            //foreach (KeyValuePair<string, int> pair in items)
            //{
            //    Console.WriteLine("{0}: {1}", pair.Key, pair.Value);
            //}
            //Console.ReadLine();
        }
    }
}
