using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityPrediction.Formatting;
using VulnerabilityPrediction.Logging;

namespace VulnerabilityPrediction
{
    class DatabaseReader
    {
        public string ConnectionInfo { get; private set; }

        public DatabaseReader(string connection)
        {
            ConnectionInfo = connection;
        }

        

        public List<Exploit> ExecuteQuery(SqlCommand cmd)
        {
            var list = new List<Exploit>();
             using (SqlConnection connection = new SqlConnection(ConnectionInfo))
             {
                 cmd.Connection = connection;
                 connection.Open();
                 try
                 {
                     var output = cmd.ExecuteReader();
                     while (output.HasRows)
                     {
                         while (output.Read())
                         {
                             object [] temp = new object[9];
                             output.GetValues(temp);
                             list.Add(new Exploit(temp));
                         }
                         output.NextResult();
                     }
                     return list;
                 }
                 catch (Exception e)
                 {
                     Logger.Log(e);
                     throw e;
                 }
                        
             }
        }

        public List<Exploit> ExecuteQuery(PlatformType platform, ExploitType exploitType)
        {
            /* Special case as the majority of web app results are sql injection and the rest just damages the reading. */
            if (platform == PlatformType.Php && exploitType == ExploitType.WebApps)
                return this.ExecuteQuery(@"SELECT * FROM v_FullExploits WHERE PlatformName = 'Php' AND Description LIKE '%sql%injection%'");
            return this.ExecuteQuery(String.Format(@"SELECT * FROM v_FullExploits WHERE PlatformName = '{0}' AND ExploitType = '{1}'", platform, exploitType));
        }

        public List<Exploit> ExecuteQuery(string query)
        {
            SqlCommand cmd = new SqlCommand(query);
            return ExecuteQuery(cmd);
        }
    }

    class DatabaseWriter
    {
        public string ConnectionInfo { get; private set; }

        public DatabaseWriter(string connection)
        {
            ConnectionInfo = connection;
        }

        public void InsertExploits(List<Exploit> forInsertion)
        {
            foreach (var exploit in forInsertion)
            {
                InsertExploit(exploit);
            }
        }

        public void InsertExploit(Exploit insert)
        {
            UpdateAuthors(insert);
            using (SqlConnection connection = new SqlConnection(ConnectionInfo))
            {
                string query = "INSERT INTO Exploits (Description, Date, TargetPort, AuthorId, PlatformID, ExploitTypeID) VALUES (@Desc, @Date, @Port, (SELECT AuthorId FROM Authors WHERE AuthorName = @authorName), (SELECT PlatformId FROM Platforms WHERE PlatformName = @platformName), (SELECT ExploitTypeId FROM ExploitTypes WHERE ExploitType = @type))";
                SqlCommand cmd = new SqlCommand(query);
                cmd.Parameters.AddWithValue("@Desc", insert.Description);
                cmd.Parameters.AddWithValue("@Port", insert.PortNumber);
                cmd.Parameters.AddWithValue("@Date", insert.DateReleased.Date.ToString("yyyy-MM-dd"));
                cmd.Parameters.AddWithValue("@authorName", insert.Author);
                cmd.Parameters.AddWithValue("@platformName", insert.Platform.ToString());
                cmd.Parameters.AddWithValue("@type", insert.Type.ToString());
                cmd.Connection = connection;
                connection.Open();
                try
                {
                    cmd.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Logger.Log(e);
                }

            }
        }

        private void UpdateAuthors(Exploit insert)
        {
            using (SqlConnection connection = new SqlConnection(ConnectionInfo))
            {
                string query = String.Format(@"INSERT INTO Authors (AuthorName) SELECT ('{0}') WHERE NOT EXISTS (SELECT * FROM Authors WHERE AuthorName = '{0}')", insert.Author);
                SqlCommand cmd = new SqlCommand(query);
                cmd.Connection = connection;
                connection.Open();
                try
                {
                    cmd.ExecuteNonQuery();
                }
                catch (Exception e)
                {
                    Logger.Log(e);
                }
            }
        }

        
    }
}
