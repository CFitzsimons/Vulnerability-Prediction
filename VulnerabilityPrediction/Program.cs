using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityPrediction.Formatting;
using VulnerabilityPrediction.Logging;

namespace VulnerabilityPrediction
{
    class Program
    {
        public static void Main()
        {
            Dictionary<string, int> pairs = new Dictionary<string, int>();
            var list = new List<Exploit>();
            //using (CsvReader reader = new CsvReader("Data Stores/exploitDB.csv"))
            //{
            //    foreach (string[] values in reader.RowEnumerator)
            //    {
                    
            //    }
            //}
            Reader r = new Reader(@"Data Source=(LocalDB)\v11.0;AttachDbFilename=C:\USERS\COLIN\DOCUMENTS\VISUAL STUDIO 2013\PROJECTS\VULNERABILITYPREDICTION\VULNERABILITYPREDICTION\DATA STORES\WAREHOUSE.MDF;Integrated Security=True");
            var rows = r.ReadQuery(String.Format(@"SELECT * FROM v_FullExploits WHERE PlatformName = '{0}'", PlatformType.Php));
            var failures = new int[16];
            
            int totalFailures = 0;
            const int minYear = 2013;
            foreach (var row in rows.Where(t => t.DateReleased.Year >= minYear))
            {
                failures[row.DateReleased.Year - 2000]++;
                totalFailures++;
            }
            var avgFailure = (double)totalFailures / 16.0;
            Console.WriteLine("Average number of failures per year: " + avgFailure);

            var prob = avgFailure / 365;
            Console.WriteLine("Number of failures per day: " + prob);
            Console.WriteLine("DONE!");
            Console.ReadLine();
            
            //var items = from pair in pairs orderby pair.Value descending select pair;
            //foreach (KeyValuePair<string, int> pair in items)
            //{
            //    Console.WriteLine("{0}: {1}", pair.Key, pair.Value);
            //}
            //Console.ReadLine();
        }
    }
}
