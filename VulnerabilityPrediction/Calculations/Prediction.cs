using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using VulnerabilityPrediction.Formatting;

namespace VulnerabilityPrediction.Calculations
{
    class Prediction
    {
        
        public static List<Exploit> GetPredictions(DateTime from, DateTime to)
        {
            var list = new List<Exploit>();
            DatabaseReader r = new DatabaseReader(@"Data Source=(LocalDB)\v11.0;AttachDbFilename=" + Path.Combine(AppDomain.CurrentDomain.BaseDirectory, @"DATA STORES\WAREHOUSE.MDF") + @";Integrated Security=True");
            FailureModeling fm = new FailureModeling(to);
            var finalList = new List<Exploit>();
            foreach (PlatformType platform in Enum.GetValues(typeof(PlatformType)))
            {
                if (platform == PlatformType.Unknown)
                    continue;
                foreach (ExploitType exploitType in Enum.GetValues(typeof(ExploitType)))
                {
                    if (exploitType == ExploitType.Unknown)
                        continue;
                    var rows = r.ExecuteQuery(platform, exploitType);

                    fm.GenerateToCutoff(rows);

                    foreach (var row in rows.Where(t => t.ExploitID == -1 && t.Platform != PlatformType.Unknown && t.DateReleased <= to && t.DateReleased > from))
                    {
                        finalList.Add(row);
                    }
                }
            }
            return finalList;
        }
    }
}
